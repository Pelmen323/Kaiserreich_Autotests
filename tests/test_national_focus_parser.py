##########################
# Test script to check for advisors having invalid ledger line
# By Pelmen, https://github.com/Pelmen323
##########################
import re

from ..test_classes.generic_test_class import ResultsReporter
from ..test_classes.localization_class import Localization
from ..test_classes.national_focus_class import National_focus

FALSE_POSITIVES = ['nee_country_select_screen', 'nee_blank']


def test_check_national_focus_contents(test_runner: object):
    """Test national focuses contents
    Args:
        test_runner (object): test object generated by conftest file
    """
    national_focuses, paths = National_focus.get_all_national_focuses(test_runner=test_runner, return_paths=True)
    national_focuses_id = National_focus.get_all_national_focuses_names(test_runner=test_runner)
    loc_keys = Localization.get_all_loc_keys(test_runner=test_runner)
    results = []
    print(len(national_focuses))

    for focus in national_focuses:
        # Focus ID
        if 'shared_focus = {' in focus:
            try:
                focus_id = re.findall('\\tid = \\b([^ \n\t]+)\\b', focus)[0]
            except IndexError:
                results.append((focus.replace('\t', '').replace('\n', '  '), paths[focus], "Missing focus id"))
                continue
        elif 'focus = {' in focus:
            try:
                focus_id = re.findall('\\t\\tid = \\b([^ \n\t]+)\\b', focus)[0]
            except IndexError:
                results.append((focus.replace('\t', '').replace('\n', '  '), paths[focus], "Missing focus id"))
                continue

        # Skips
        if focus_id in FALSE_POSITIVES:
            continue
        # Focus GFX
        if 'icon =' not in focus:
            results.append((focus_id, paths[focus], "Missing focus gfx path"))
        # Focus position
        if 'x =' not in focus:
            results.append((focus_id, paths[focus], "Missing focus x axis"))
        if 'y =' not in focus:
            results.append((focus_id, paths[focus], "Missing focus y axis"))
        # AI factor
        # if 'ai_will_do = {' not in focus:
        #     results.append((focus_id, paths[focus], "Missing ai_will_do factor"))
        # Reward
        if 'cost = ' not in focus:
            results.append((focus_id, paths[focus], "Missing cost"))
        # Reward
        if 'completion_reward = {' not in focus:
            results.append((focus_id, paths[focus], "Missing completion reward"))
        # Logging
        try:
            focus_logging = re.findall('log = ".*"', focus)[0]
        except IndexError:
            results.append((focus_id, paths[focus], "Missing logging"))
            continue
        if f'focus {focus_id}' not in focus_logging:
            results.append((focus_id, focus_logging, paths[focus], "Logging line doesn't contain focus id"))

        # Prerequisites and dependencies
        if focus.count('focus =') > 1:
            try:
                focuses_found = re.findall('focus = \\b([^ \n\t]+)\\b', focus)[0]
            except IndexError:
                results.append((focus_id, paths[focus], "Something is wrong with focus dependencies"))
                continue

            if isinstance(focuses_found, str):
                if focuses_found not in national_focuses_id:
                    results.append((focus_id, paths[focus], f"Focus dependency {focuses_found} is not existing"))
            else:
                for i in focuses_found:
                    if i not in national_focuses_id:
                        results.append((focus_id, paths[focus], f"Focus dependency {i} is not existing"))

        # Check for dynamic loc in focus name loc
        if focus_id in loc_keys.keys():
            if "[" in loc_keys[focus_id]:       # Either scripted loc or variable
                if "dynamic = yes" not in focus:
                    results.append((focus_id, paths[focus], "Missing `dynamic = yes` - scripted loc/variable in focus name"))

    ResultsReporter.report_results(results=results, message="Issues during focus parsing encountered. Check console output")
